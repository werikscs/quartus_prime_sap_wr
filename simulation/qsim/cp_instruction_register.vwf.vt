// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2023 22:07:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cp_instruction_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cp_instruction_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg treg_bus0;
reg treg_bus1;
reg treg_bus2;
reg treg_bus3;
reg treg_bus4;
reg treg_bus5;
reg treg_bus6;
reg treg_bus7;
reg CLOCK;
reg IR_IN;
reg IR_OUT;
reg RESET;
// wires                                               
wire bus0;
wire bus1;
wire bus2;
wire bus3;
wire bus4;
wire bus5;
wire bus6;
wire bus7;

// assign statements (if any)                          
assign bus0 = treg_bus0;
assign bus1 = treg_bus1;
assign bus2 = treg_bus2;
assign bus3 = treg_bus3;
assign bus4 = treg_bus4;
assign bus5 = treg_bus5;
assign bus6 = treg_bus6;
assign bus7 = treg_bus7;
cp_instruction_register i1 (
// port map - connection between master ports and signals/registers   
	.bus0(bus0),
	.bus1(bus1),
	.bus2(bus2),
	.bus3(bus3),
	.bus4(bus4),
	.bus5(bus5),
	.bus6(bus6),
	.bus7(bus7),
	.CLOCK(CLOCK),
	.IR_IN(IR_IN),
	.IR_OUT(IR_OUT),
	.RESET(RESET)
);
initial 
begin 
#1000000 $finish;
end 

// bus0
initial
begin
	treg_bus0 = 1'b1;
	treg_bus0 = #50000 1'b0;
	treg_bus0 = #50000 1'b1;
	treg_bus0 = #50000 1'b0;
	treg_bus0 = #50000 1'b1;
	treg_bus0 = #100000 1'b0;
	treg_bus0 = #100000 1'b1;
	treg_bus0 = #100000 1'b0;
	treg_bus0 = #250000 1'b1;
	treg_bus0 = #50000 1'b0;
	treg_bus0 = #100000 1'b1;
	treg_bus0 = #50000 1'b0;
end 

// bus1
initial
begin
	treg_bus1 = 1'b0;
	treg_bus1 = #65000 1'b1;
	treg_bus1 = #195000 1'b0;
	treg_bus1 = #195000 1'b1;
	treg_bus1 = #65000 1'b0;
	treg_bus1 = #65000 1'b1;
	treg_bus1 = #195000 1'b0;
	treg_bus1 = #130000 1'b1;
end 

// bus2
initial
begin
	treg_bus2 = 1'b1;
	treg_bus2 = #50000 1'b0;
	treg_bus2 = #50000 1'b1;
	treg_bus2 = #50000 1'b0;
	treg_bus2 = #50000 1'b1;
	treg_bus2 = #100000 1'b0;
	treg_bus2 = #100000 1'b1;
	treg_bus2 = #100000 1'b0;
	treg_bus2 = #250000 1'b1;
	treg_bus2 = #50000 1'b0;
	treg_bus2 = #100000 1'b1;
	treg_bus2 = #50000 1'b0;
end 

// bus3
initial
begin
	treg_bus3 = 1'b0;
	treg_bus3 = #65000 1'b1;
	treg_bus3 = #195000 1'b0;
	treg_bus3 = #195000 1'b1;
	treg_bus3 = #65000 1'b0;
	treg_bus3 = #65000 1'b1;
	treg_bus3 = #195000 1'b0;
	treg_bus3 = #130000 1'b1;
end 

// bus4
initial
begin
	treg_bus4 = 1'b1;
	treg_bus4 = #50000 1'b0;
	treg_bus4 = #50000 1'b1;
	treg_bus4 = #50000 1'b0;
	treg_bus4 = #50000 1'b1;
	treg_bus4 = #100000 1'b0;
	treg_bus4 = #100000 1'b1;
	treg_bus4 = #100000 1'b0;
	treg_bus4 = #250000 1'b1;
	treg_bus4 = #50000 1'b0;
	treg_bus4 = #100000 1'b1;
	treg_bus4 = #50000 1'b0;
end 

// bus5
initial
begin
	treg_bus5 = 1'b0;
	treg_bus5 = #65000 1'b1;
	treg_bus5 = #195000 1'b0;
	treg_bus5 = #195000 1'b1;
	treg_bus5 = #65000 1'b0;
	treg_bus5 = #65000 1'b1;
	treg_bus5 = #195000 1'b0;
	treg_bus5 = #130000 1'b1;
end 

// bus6
initial
begin
	treg_bus6 = 1'b1;
	treg_bus6 = #50000 1'b0;
	treg_bus6 = #50000 1'b1;
	treg_bus6 = #50000 1'b0;
	treg_bus6 = #50000 1'b1;
	treg_bus6 = #100000 1'b0;
	treg_bus6 = #100000 1'b1;
	treg_bus6 = #100000 1'b0;
	treg_bus6 = #250000 1'b1;
	treg_bus6 = #50000 1'b0;
	treg_bus6 = #100000 1'b1;
	treg_bus6 = #50000 1'b0;
end 

// bus7
initial
begin
	treg_bus7 = 1'b0;
	treg_bus7 = #65000 1'b1;
	treg_bus7 = #195000 1'b0;
	treg_bus7 = #195000 1'b1;
	treg_bus7 = #65000 1'b0;
	treg_bus7 = #65000 1'b1;
	treg_bus7 = #195000 1'b0;
	treg_bus7 = #130000 1'b1;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// IR_IN
initial
begin
	IR_IN = 1'b1;
	IR_IN = #50000 1'b0;
	IR_IN = #50000 1'b1;
	IR_IN = #100000 1'b0;
	IR_IN = #100000 1'b1;
	IR_IN = #400000 1'b0;
	IR_IN = #100000 1'b1;
	IR_IN = #100000 1'b0;
end 

// IR_OUT
initial
begin
	IR_OUT = 1'b0;
	IR_OUT = #65000 1'b1;
	IR_OUT = #195000 1'b0;
	IR_OUT = #195000 1'b1;
	IR_OUT = #130000 1'b0;
	IR_OUT = #130000 1'b1;
	IR_OUT = #65000 1'b0;
	IR_OUT = #65000 1'b1;
	IR_OUT = #130000 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 
endmodule

