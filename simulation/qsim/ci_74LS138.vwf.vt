// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2023 18:43:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ci_74LS138
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ci_74LS138_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg G1;
reg G2A;
reg G2B;
// wires                                               
wire Y0;
wire Y1;
wire Y2;
wire Y3;
wire Y4;
wire Y5;
wire Y6;
wire Y7;

// assign statements (if any)                          
ci_74LS138 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.G1(G1),
	.G2A(G2A),
	.G2B(G2B),
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.Y5(Y5),
	.Y6(Y6),
	.Y7(Y7)
);
initial 
begin 
#1000000 $finish;
end 

// G1
initial
begin
	G1 = 1'bX;
	G1 = #250000 1'b0;
	G1 = #100000 1'b1;
	G1 = #160000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
	G1 = #20000 1'b1;
	G1 = #20000 1'b0;
end 

// G2A
initial
begin
	G2A = 1'b1;
	G2A = #70000 1'b0;
	G2A = #80000 1'b1;
	G2A = #100000 1'bX;
	G2A = #100000 1'b0;
	G2A = #200000 1'b1;
	G2A = #40000 1'b0;
	G2A = #40000 1'b1;
	G2A = #40000 1'b0;
	G2A = #40000 1'b1;
	G2A = #40000 1'b0;
	G2A = #40000 1'b1;
	G2A = #40000 1'b0;
end 

// G2B
initial
begin
	G2B = 1'b0;
	G2B = #70000 1'b1;
	G2B = #180000 1'bX;
	G2B = #100000 1'b0;
	G2B = #240000 1'b1;
	G2B = #80000 1'b0;
	G2B = #80000 1'b1;
	G2B = #80000 1'b0;
end 

// A
initial
begin
	A = 1'bX;
	A = #350000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
end 

// B
initial
begin
	B = 1'bX;
	B = #350000 1'b0;
	B = #40000 1'b1;
	B = #40000 1'b0;
	B = #40000 1'b1;
	B = #40000 1'b0;
	B = #40000 1'b1;
	B = #40000 1'b0;
	B = #40000 1'b1;
	B = #40000 1'b0;
	B = #40000 1'b1;
	B = #40000 1'b0;
	B = #40000 1'b1;
	B = #40000 1'b0;
end 

// C
initial
begin
	C = 1'bX;
	C = #350000 1'b0;
	C = #80000 1'b1;
	C = #80000 1'b0;
	C = #80000 1'b1;
	C = #80000 1'b0;
	C = #80000 1'b1;
	C = #80000 1'b0;
end 
endmodule

